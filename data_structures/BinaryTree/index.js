// –£–∑–µ–ª –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞
class BinaryTreeNode {
  constructor(value) {
    this.value = value;     // –ó–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞
    this.left = null;       // –õ–µ–≤—ã–π –ø–æ—Ç–æ–º–æ–∫
    this.right = null;      // –ü—Ä–∞–≤—ã–π –ø–æ—Ç–æ–º–æ–∫
  }

  // –í—Å—Ç–∞–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Binary Search Tree (BST)
  insert(newValue) {
    if (newValue < this.value) {
      if (this.left) {
        this.left.insert(newValue);
      } else {
        this.left = new BinaryTreeNode(newValue);
      }
    } else {
      if (this.right) {
        this.right.insert(newValue);
      } else {
        this.right = new BinaryTreeNode(newValue);
      }
    }
  }

  // –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ in-order (–ª–µ–≤–æ ‚Üí –∫–æ—Ä–µ–Ω—å ‚Üí –ø—Ä–∞–≤–æ) ‚Äî –¥–∞—ë—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  inOrder() {
    const result = [];
    if (this.left) result.push(...this.left.inOrder());
    result.push(this.value);
    if (this.right) result.push(...this.right.inOrder());
    return result;
  }

  // –ü–æ–∏—Å–∫ –∑–Ω–∞—á–µ–Ω–∏—è
  contains(target) {
    if (this.value === target) return true;
    if (target < this.value) {
      return this.left?.contains(target) || false;
    } else {
      return this.right?.contains(target) || false;
    }
  }
}


const tree = new BinaryTreeNode(10);
tree.insert(5);
tree.insert(15);
tree.insert(3);
tree.insert(7);
tree.insert(12);
tree.insert(18);

console.log("üåø In-order (sorted):", tree.inOrder());
// ‚ûú [3, 5, 7, 10, 12, 15, 18]

console.log("üîç Contains 7:", tree.contains(7)); // true
console.log("üîç Contains 20:", tree.contains(20)); // false
