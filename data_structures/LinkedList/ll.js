class SlowInsertList {
  constructor() {
    this.items = [];
  }

  prepend(item) {
    this.items.unshift(item); // ‚ùå O(n) ‚Äî –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–¥–≤–∏–≥–∞–µ—Ç—Å—è
  }
}

class Node {
  constructor(data) {
    this.data = data;
    this.next = null;
  }
}

class FastLinkedList {
  constructor() {
    this.head = null;
  }

  prepend(item) {
    const newNode = new Node(item);
    newNode.next = this.head; // üîó –ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π head
    this.head = newNode;      // üß† –ù–æ–≤—ã–π head ‚Äî —ç—Ç–æ –Ω–∞—à —ç–ª–µ–º–µ–Ω—Ç
  }
}


function benchmark(listClass, label) {
  const list = new listClass();
  const count = 100_000;

  const start = Date.now();

  for (let i = 0; i < count; i++) {
    list.prepend(`item_${i}`);
  }

  const end = Date.now();
  console.log(`${label}: ${end - start}ms`);
}


console.log("üöÄ –ë–µ–Ω—á–º–∞—Ä–∫ –≤—Å—Ç–∞–≤–∫–∏ –≤ –Ω–∞—á–∞–ª–æ –Ω–∞ 100,000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");
benchmark(SlowInsertList, "‚ùå –ú–∞—Å—Å–∏–≤ —Å unshift()");
benchmark(FastLinkedList, "‚úÖ Linked List —Å —É–∫–∞–∑–∞—Ç–µ–ª–µ–º head");
