
// ‚ùå –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–∞—Å—Å–∏–≤–µ —Å shift (–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä—ë–º–µ)
class SlowQueue {
  constructor() {
    this.queue = [];
  }

  enqueue(item) {
    this.queue.push(item); // O(1)
  }

  dequeue() {
    return this.queue.shift(); // ‚ùå O(n) ‚Äî –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å–¥–≤–∏–≥–∞–µ—Ç –º–∞—Å—Å–∏–≤
  }
}

// ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ—á–µ—Ä–µ–¥—å –Ω–∞ –¥–≤—É—Ö —Å—Ç–µ–∫–∞—Ö (—Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π ‚Äî O(1))
class Queue {
  constructor() {
    // üîπ –°—Ç–µ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å—é–¥–∞ —á–µ—Ä–µ–∑ enqueue()
    this.inStack = [];

    // üîπ –°—Ç–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ —á—Ç–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    // –ö–æ–≥–¥–∞ –æ–Ω –ø—É—Å—Ç, –º—ã –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ –≤—Å—ë –∏–∑ inStack
    this.outStack = [];
  }

  // üì• –ü—Ä–∏—ë–º —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
  enqueue(item) {
    // üîπ –ü—Ä–∏—ë–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç –≤ –∫–æ–Ω–µ—Ü inStack ‚Äî —ç—Ç–æ O(1)
    this.inStack.push(item); // ‚úÖ –ü—Ä–∏—ë–º –±–µ–∑ —Å–¥–≤–∏–≥–∞ –º–∞—Å—Å–∏–≤–∞
  }

  // üì§ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—á–µ—Ä–µ–¥–∏
  dequeue() {
    // üß† –ü—Ä–∏—ë–º ‚Ññ1: –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    // –≠—Ç–æ **–ª–µ–Ω–∏–≤—ã–π –ø–æ–¥—Ö–æ–¥ (lazy transfer)**, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞,
    // –∫–æ–≥–¥–∞ outStack –ø—É—Å—Ç ‚Äî —Ç.–µ. –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–¥–∫–æ
    if (this.outStack.length === 0) {
      // üß† –ü—Ä–∏—ë–º ‚Ññ2: —Ä–µ–≤–µ—Ä—Å —á–µ—Ä–µ–∑ —Å—Ç–µ–∫ ‚Äî –±—ã—Å—Ç—Ä–æ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –±–µ–∑ —Å–¥–≤–∏–≥–æ–≤
      // –í–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–≤–∏–≥–∞—Ç—å –º–∞—Å—Å–∏–≤ (–∫–∞–∫ shift()),
      // –º—ã –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –≤ –¥—Ä—É–≥–æ–π —Å—Ç–µ–∫
      while (this.inStack.length > 0) {
        this.outStack.push(this.inStack.pop()); // ‚úÖ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å: O(1) –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥
      }
    }

    // üß† –ü—Ä–∏—ë–º ‚Ññ3: –∞–º–æ—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    // –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–Ω–æ—Å ‚Äî –æ–Ω –¥–µ–ª–∞–µ—Ç—Å—è "—Ä–∞–∑ –≤ N –≤—ã–∑–æ–≤–æ–≤",
    // –∏ –≤ —Å—Ä–µ–¥–Ω–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑
    return this.outStack.pop(); // ‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–∞ ‚Äî O(1)
  }
}


// ‚öôÔ∏è –ë–µ–Ω—á–º–∞—Ä–∫-—Ñ—É–Ω–∫—Ü–∏—è
function benchmark(queueClass, label) {
  const q = new queueClass();

  const start = Date.now();

  // –≠–º—É–ª—è—Ü–∏—è –ø—Ä–∏—ë–º–∞ 1000000 –ª–æ–≥–æ–≤
  for (let i = 0; i < 1000000; i++) {
    q.enqueue(`log_${i}`);
  }

  // –≠–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–∏—Ö –ª–æ–≥–æ–≤
  for (let i = 0; i < 1000000; i++) {
    q.dequeue();
  }

  const end = Date.now();
  console.log(`${label}: ${end - start}ms`);
}

// üß™ –ó–∞–ø—É—Å–∫
console.log("üöÄ –ë–µ–Ω—á–º–∞—Ä–∫ –æ—á–µ—Ä–µ–¥–µ–π –Ω–∞ 1,000,000 —ç–ª–µ–º–µ–Ω—Ç–æ–≤:");
benchmark(SlowQueue, "‚ùå –ú–∞—Å—Å–∏–≤ —Å shift()");
benchmark(Queue,      "‚úÖ –û—á–µ—Ä–µ–¥—å –Ω–∞ –¥–≤—É—Ö —Å—Ç–µ–∫–∞—Ö");
